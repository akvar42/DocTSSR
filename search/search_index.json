{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenue sur le site de Documentation TSSR2023","text":"<p>N'hesitez pas \u00e0 envoyer vos cours sur teams il seront publier</p>"},{"location":"#methodes","title":"Methodes","text":"<ul> <li>Envoy\u00e9 vos cours en .md</li> <li>Ne partag\u00e9 pas de contenus sensible (nom,ip, info perso ect ...)</li> <li>l'union fait la force</li> </ul>"},{"location":"#merci","title":"Merci","text":""},{"location":"demo/demo-vim/","title":"R\u00e9sum\u00e9 VIM","text":""},{"location":"demo/demo-vim/#les-modes","title":"Les modes","text":""},{"location":"demo/demo-vim/#mode-commande","title":"Mode commande","text":"<ul> <li>Effectuer des actions (copier, supprimer, enregistrer, ...)</li> <li>On peut pas \u00e9crire dans ce mode</li> <li>On revient en mode commande via ma touche <code>Esc</code></li> </ul>"},{"location":"demo/demo-vim/#mode-insertion","title":"Mode insertion","text":"<ul> <li>Utilis\u00e9 pour \u00e9crire du contenu</li> </ul> <p>Plusieurs touches pour passer dans ce mode:</p> <ul> <li><code>i</code> : on ins\u00e8re avant le curseur</li> <li><code>a</code> : on ajoute apr\u00e8s le curseur</li> <li><code>I</code> : on ins\u00e8re en d\u00e9but de ligne</li> <li><code>A</code> : on ajoute en fin de ligne</li> <li><code>o</code> : on cr\u00e9e une nouvelle ligne en dessous</li> <li><code>O</code> : on cr\u00e9e une nouvelle ligne au dessus</li> </ul>"},{"location":"demo/demo-vim/#mode-visuel","title":"Mode visuel","text":"<ul> <li>Permet de s\u00e9lectionner du contenu, pour y apporter des modification ou effectuer certaines actions</li> </ul> <p>Plusieurs touches :</p> <ul> <li><code>v</code> : permet de s\u00e9lectionner des lignes enti\u00e8res</li> <li><code>Ctrl+v</code> : permet de s\u00e9lectionner du contenu en mode bloc</li> </ul>"},{"location":"demo/demo-vim/#les-commandes","title":"Les commandes","text":""},{"location":"demo/demo-vim/#de-base","title":"De base","text":"<ul> <li><code>:e nom_du_fichier</code> : ouvrir un fichier existant, ou pr\u00e9parer un nouveau fichier</li> <li><code>:q</code> : ferme le fichier, si pas de modifications. En cas de modifications non sauvegard\u00e9es, utiliser <code>:q!</code> pour forcer la fermeture</li> <li><code>:w</code> : sauvegarder les modifications. <code>:w nom_du_fichier</code> pour sauvegarder sous un nouveau nom</li> <li><code>:wq</code> : sauvegarder et quitter, change forc\u00e9ment la date de derni\u00e8re modif</li> <li><code>:x</code> : sauvegarder si n\u00e9cessaire et quitter, ne change la date de derni\u00e8re modif qu'en cas de modification de contenu</li> <li><code>:shell</code> : on ouvre un shell, sans fermer Vim, puis on retourne dans l'\u00e9dition du fichier une fois tap\u00e9 <code>Ctrl+d</code> ou <code>exit</code></li> <li> <p><code>:terminal</code> : on ouvre un shell sous le contenu ouvert</p> <ul> <li>on peut basculer du shell au contenu avec <code>Ctrl+ww</code></li> <li>on ferme le terminal avec <code>Ctrl+d</code> ou <code>exit</code> (en ayant le focus dedans)</li> </ul> </li> <li> <p><code>:vs nom_du_fichier</code> : split verticalement et ouvre le fichier \u00e0 droite</p> </li> <li> <p><code>:sp</code> : split horizontalement et ouvre le fichier</p> <ul> <li>on peut basculer du shell au contenu avec <code>Ctrl+ww</code></li> </ul> </li> <li> <p><code>set nu</code>: affiche les num\u00e9ros de lignes</p> </li> </ul>"},{"location":"demo/demo-vim/#de-navigation","title":"De navigation","text":"<ul> <li><code>:numero_de_ligne</code> : se positionne sur la ligne souhait\u00e9e</li> <li> <p><code>/terme</code> : se positionne sur la prochaine occurence de terme</p> <ul> <li><code>n</code> : se positionner \u00e0 la prochaine occurence</li> <li><code>N</code> : se positionner \u00e0 l'occurence pr\u00e9c\u00e9dente</li> </ul> </li> <li> <p><code>G</code> : se positionne sur la derni\u00e8re ligne</p> </li> <li><code>gg</code> ou <code>:1</code> : se positionne sur la premi\u00e8re ligne</li> <li><code>$</code> : se positionne en fin de ligne</li> <li><code>^^</code> : se positionne en d\u00e9but de ligne</li> <li><code>w</code>: se positionne sur le mot suivant</li> <li><code>10w</code>: se positionne sur au 10\u00e8me mot apr\u00e8s le curseur</li> <li><code>b</code>: se positionne sur le mot pr\u00e9c\u00e9dent</li> <li><code>10b</code>: se positionne sur au 10\u00e8me mot pr\u00e9c\u00e9dent le curseur</li> </ul>"},{"location":"demo/demo-vim/#de-manipulation-de-texte","title":"De manipulation de texte","text":"<ul> <li><code>dd</code> : supprime la ligne sous le curseur (<code>d</code> en mode visuel) et place le contenu en m\u00e9moire</li> <li><code>10dd</code> : supprime les 10 lignes \u00e0 partir de la ligne courrante et place le contenu en m\u00e9moire</li> <li><code>yy</code> : copie la ligne sous le curseur (<code>d</code> en mode visuel) et place le contenu en m\u00e9moire</li> <li><code>10yy</code> : copie les 10 lignes \u00e0 partir de la ligne courrante et place le contenu en m\u00e9moire</li> <li><code>p</code> : colle le contenu en m\u00e9moire (sous le curseur)</li> <li><code>P</code> : colle le contenu en m\u00e9moire (au dessus du curseur)</li> <li><code>cw</code> : supprimer le mot, place le contenu en m\u00e9moire et passe en mode insertion</li> <li><code>20cw</code> : supprimer les 20 prochains mots, place le contenu en m\u00e9moire et passe en mode insertion</li> <li><code>x</code> supprime le caract\u00e8re sous le curseur</li> <li><code>3x</code> supprime les 3 prochains caract\u00e8res sous le curseur</li> <li><code>d$</code> supprime tout ce qui suit le curseur, jusqu'\u00e0 la fin de ligne</li> <li><code>d^^</code> supprime tout ce qui pr\u00e9c\u00e8de le curseur, jusqu'\u00e0 la fin de ligne</li> <li><code>:s/foo/bar/</code> : substitution de la prochaine occurence de foo par bar sur la ligne courrante</li> <li><code>:s/foo/bar/g</code> : substitution de toutes les occurences de foo par bar sur la ligne courrante</li> <li><code>:.,.+10s/foo/bar/g</code> : substitution de toutes les occurences de foo par bar sur les 10 prochaines lignes, dont la ligne courrante</li> <li><code>:10,20s/foo/bar/g</code> : substitution de toutes les occurences de foo par bar pr\u00e9sentes entre les lignes 10 et 20</li> <li><code>:%s/foo/bar/g</code> : substitution de toutes les occurences de foo par bar pr\u00e9sentes dans le fichier entier (%)</li> </ul>"},{"location":"demo/githubnoteav/","title":"mini site avec github et mkdocs","text":""},{"location":"demo/githubnoteav/#initialisation-de-git","title":"Initialisation de Git","text":"<ol> <li> <p>Initialiser le r\u00e9pertoire actuel avec Git:</p> <p>git init</p> </li> <li> <p>Configurer votre nom d'utilisateur et votre adresse e-mail pour Git :</p> <p>git config user.name \"mon prenom\" git config user.email \"monemail@mail.com\"</p> </li> <li> <p>V\u00e9rifier le statut du r\u00e9pertoire :</p> <p>git status</p> </li> <li> <p>Ajouter un dossier pour le commit :</p> <p>git add mondossier/</p> </li> <li> <p>Cr\u00e9er un commit :</p> <p>git commit -m 'nomducommit'</p> </li> <li> <p>Consulter l'historique des commits :</p> <p>git log</p> </li> </ol>"},{"location":"demo/githubnoteav/#publier-sur-github","title":"Publier sur GitHub","text":"<ol> <li> <p>Cr\u00e9er un nouveau d\u00e9p\u00f4t sur GitHub. Donner un nom + options appropri\u00e9es.</p> </li> <li> <p>Une fois le d\u00e9p\u00f4t cr\u00e9\u00e9, liez-le \u00e0 votre projet local :</p> <p>git remote add origin \"adresse du d\u00e9p\u00f4t\" git push -u origin main</p> </li> </ol>"},{"location":"demo/githubnoteav/#creation-du-site-avec-mkdocs","title":"Cr\u00e9ation du site avec MkDocs","text":"<p>Configuration de l'environnement</p> <ol> <li> <p>Installez python3-pip et python3-venv.</p> </li> <li> <p>Cr\u00e9ez un environnement virtuel :</p> <p>python3 -m venv .venv</p> </li> <li> <p>Pour \u00e9viter que Git suive le dossier .venv, cr\u00e9ez un fichier .gitignore dans le dossier racine du projet avec le contenu suivant : </p> </li> <li> <p>.venv/</p> </li> </ol> <p>Ensuite, ajoutez et validez ce fichier :</p> <p>git add .gitignore git commit -m 'build: add .gitignore'</p> <ol> <li>Activez l'environnement virtuel : <p>source .venv/bin/activate</p> </li> </ol>"},{"location":"demo/githubnoteav/#installation-et-utilisation-de-mkdocs","title":"Installation et utilisation de MkDocs","text":"<ol> <li> <p>Installez MkDocs :</p> <p>pip install mkdocs</p> </li> <li> <p>Cr\u00e9ez un nouveau projet MkDocs dans le r\u00e9pertoire courant :</p> <p>mkdocs new .</p> </li> <li> <p>Lancer la documentation en local :</p> <p>mkdocs serve</p> </li> <li> <p>Modifier le fichier de configuration mkdocs.yml pour y indiquer le nom de votre site :</p> <p>sitename: monsite</p> </li> <li> <p>Ajouter modifications locales au d\u00e9p\u00f4t :</p> <p>git add . git commit -m \"Description du commit\" git push origin main</p> </li> <li> <p>D\u00e9ployer documentation sur GitHub Pages :</p> <p>mkdocs gh-deploy</p> </li> </ol> <p>Pour trouver le site aller dans \"Settings\" -&gt; \"General\" -&gt; \"Pages\" pour consulter le lien vers votre documentation h\u00e9berg\u00e9e.</p>"},{"location":"script/pdftomarkdown/Readme/","title":"Readme","text":"<p>readme de scriptpdftomarkdown.py Version 5 A vincent 03/08/2023  </p>"},{"location":"script/pdftomarkdown/Readme/#description","title":"Description","text":"<p>Conversion de PDF en Markdown Ce script permet de convertir des fichiers PDF en fichiers Markdown, y compris les images incluses dans les PDF.  Il fonctionne sous Debian et d'autres syst\u00e8mes Linux.</p>"},{"location":"script/pdftomarkdown/Readme/#etapes-dinstallation","title":"\u00c9tapes d'installation","text":"<p>(en root ou ajouter sudo)</p>"},{"location":"script/pdftomarkdown/Readme/#installer-python","title":"Installer Python","text":"<p>Assurez-vous que Python 3 est install\u00e9 sur votre syst\u00e8me. Vous pouvez l'installer en ex\u00e9cutant:</p> <p>apt update apt install python3</p>"},{"location":"script/pdftomarkdown/Readme/#installer-pip-gestionnaire-de-paquets-python","title":"Installer PIP (Gestionnaire de paquets Python)","text":"<p>Installez PIP pour faciliter l'installation des d\u00e9pendances:</p> <p>apt install python3-pip</p>"},{"location":"script/pdftomarkdown/Readme/#installer-les-dependances","title":"Installer les D\u00e9pendances","text":"<p>Ex\u00e9cutez la commande suivante pour installer les d\u00e9pendances requises:</p> <p>pip3 install PyPDF2 pdf2image tabulate mistune</p>"},{"location":"script/pdftomarkdown/Readme/#installer-poppler-pour-pdf2image","title":"Installer Poppler (pour pdf2image)","text":"<p>La biblioth\u00e8que pdf2image n\u00e9cessite Poppler pour fonctionner. Installez-le avec:</p> <p>apt install poppler-utils</p>"},{"location":"script/pdftomarkdown/Readme/#utilisation-du-script","title":"Utilisation du Script","text":"<p>Sauvegard\u00e9 le script dans un emplacement accessible sur votre syst\u00e8me.</p> <p>Ouvrez un terminal et naviguez vers le r\u00e9pertoire o\u00f9 se trouve le script. </p> <p>Lancez-le avec:</p> <p>python3 scriptpdftomarkdown5.py</p> <p>Sp\u00e9cifiez le chemin du dossier contenant les PDF:  Le script vous demandera de sp\u00e9cifier le chemin du dossier o\u00f9 se trouvent les fichiers PDF \u00e0 convertir.  Vous pouvez sp\u00e9cifier un chemin absolu ou relatif.</p> <p>Le script cr\u00e9era un dossier pour chaque fichier PDF et sauvegardera le fichier Markdown ainsi que les images associ\u00e9es dans ce dossier.</p>"},{"location":"script/pdftomarkdown/Readme/#licence-libre","title":"Licence libre","text":"<p>Ce script est sans garantie. si votre ordinateur explose et que vous vous blessiez gravement, si votre femme vous quitte, ou que le ciel vous tombe sur la t\u00eate: Dans tout les cas: je ne suis pas responsable.</p>"},{"location":"script/pdftomarkdown/scriptpdftomarkdown5/","title":"Scriptpdftomarkdown5","text":"<pre><code>import PyPDF2\nfrom pdf2image import convert_from_path\nimport glob\nimport os\nimport shutil\n\n#Lire Readme !!!!!!!!!!!!!\n#Avincent 05082023\n\ndef extract_pdfs(source_folder, target_folder):\n    # Trouver tous les fichiers PDF dans le dossier source et les sous-dossiers\n    pdf_files = []\n    for root, dirs, files in os.walk(source_folder):\n        for file in files:\n            if file.endswith(\".pdf\"):\n                pdf_files.append(os.path.join(root, file))\n\n    # Copier les fichiers PDF trouv\u00e9s dans le dossier cible\n    for pdf_file in pdf_files:\n        shutil.copy(pdf_file, target_folder)\n        print(f\"Copi\u00e9: {pdf_file} -&gt; {target_folder}\")\n\ndef extract_text_and_images(pdf_path, output_folder):\n    images = []\n    pdf_reader = PyPDF2.PdfReader(pdf_path)\n    text = \"\"\n    for page_num in range(len(pdf_reader.pages)):\n        page = pdf_reader.pages[page_num]\n        # Extraire le texte de la page\n        page_text = page.extract_text()\n        text += page_text + \"\\n\"\n        # Convertir la page PDF en image\n        image = convert_from_path(pdf_path, first_page=page_num, last_page=page_num + 1)[0]\n        # Sauvegarder l'image dans le dossier de sortie\n        image_path = os.path.join(output_folder, f\"image{page_num}.png\")\n        image.save(image_path)\n        images.append(image_path)\n    return text, images\n\ndef main():\n    source_folder = input(\"Veuillez entrer le chemin du dossier contenant les PDF: \")\n    target_folder = \"target_pdfs\"\n    os.makedirs(target_folder, exist_ok=True)\n    # Extraire les PDF du dossier source vers le dossier cible\n    extract_pdfs(source_folder, target_folder)\n\n    pdf_paths = glob.glob(os.path.join(target_folder, '*.pdf'))\n    for pdf_path in pdf_paths:\n        # Cr\u00e9er un dossier avec le nom du PDF\n        output_folder = os.path.basename(pdf_path).replace('.pdf', '')\n        os.makedirs(output_folder, exist_ok=True)\n\n        # Extraire le texte et les images du PDF\n        text, images = extract_text_and_images(pdf_path, output_folder)\n        markdown_content = text\n\n        # Ajouter les images au contenu Markdown en utilisant un chemin relatif\n        for page_num, image in enumerate(images):\n            relative_image_path = f\"image{page_num}.png\" # Chemin relatif \u00e0 l'emplacement du fichier Markdown\n            markdown_content += f\"![Image]({relative_image_path})\\n\"\n\n        # Sauvegarder le contenu Markdown dans un fichier\n        output_file_name = os.path.join(output_folder, os.path.basename(pdf_path).replace('.pdf', '.md'))\n        with open(output_file_name, 'w', encoding='utf-8') as file:\n            file.write(markdown_content)\n\n        print(f\"Fichier Markdown {output_file_name} g\u00e9n\u00e9r\u00e9 avec succ\u00e8s.\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"script/powershell/MVpdf/","title":"MVpdf","text":"<pre><code># D\u00e9finir le chemin du dossier source et du dossier de destination\n$sourceDir = \"C:\\chemin\\vers\\le\\dossier\\source\"\n$destDir = \"C:\\chemin\\vers\\le\\dossier\\destination\"\n\n# Rechercher tous les fichiers .pdf, \u00e0 l'exclusion des .zip, et les copier vers le dossier de destination\nGet-ChildItem -Path $sourceDir -Recurse -File -Filter \"*.pdf\" | Where-Object { $_.Extension -ne \".zip\" } | ForEach-Object {\n    $dest = $destDir + $_.FullName.Substring($sourceDir.Length)\n    $destFolder = Split-Path -Path $dest -Parent\n    if (-not (Test-Path $destFolder)) {\n        New-Item -Path $destFolder -ItemType Directory\n    }\n    Copy-Item -Path $_.FullName -Destination $dest\n}\n\nWrite-Output \"Copie termin\u00e9e.\"\n</code></pre>"},{"location":"script/powershell/mvpdf/","title":"Mvpdf","text":"<pre><code>#ce script extrait les fichier qui contiennent \"Support de cours\" dans leur nom et les renomes avec le noms du dossier qui les contiennent\n\n# D\u00e9finir le chemin du dossier source et du dossier de destination\n$sourceDir = \"C:\\chemin\\vers\\le\\dossier\\source\"\n$destDir = \"C:\\chemin\\vers\\le\\dossier\\destination\"\n\n# Rechercher tous les fichiers .pdf, \u00e0 l'exclusion des .zip, qui contiennent \"Support de cours\" dans leur nom\nGet-ChildItem -Path $sourceDir -Recurse -File -Filter \"*.pdf\" | Where-Object { $_.Extension -ne \".zip\" -and $_.Name -like \"*Support de cours*\" } | ForEach-Object {\n    $dest = $destDir + $_.FullName.Substring($sourceDir.Length)\n    $destFolder = Split-Path -Path $dest -Parent\n    $folderName = Split-Path $_.Directory -Leaf\n    $newFileName = \"${folderName}_$($_.Name)\"\n\n    if (-not (Test-Path $destFolder)) {\n        New-Item -Path $destFolder -ItemType Directory\n    }\n\n    $destFullPath = Join-Path -Path $destFolder -ChildPath $newFileName\n    Copy-Item -Path $_.FullName -Destination $destFullPath\n}\n\nWrite-Output \"Copie et renommage termin\u00e9s.\"\n</code></pre>"},{"location":"script/traitement%20fichier%20cours/","title":"Index","text":""},{"location":"script/traitement%20fichier%20cours/#utilisation-du-script-de-traitement-de-fichiers-markdown","title":"Utilisation du script de traitement de fichiers Markdown","text":"<p>Ce script utilise l'API OpenAI pour traiter des fichiers Markdown, en extrayant des donn\u00e9es pertinentes du texte et en les mettant en page au format Markdown.</p>"},{"location":"script/traitement%20fichier%20cours/#prerequis","title":"Pr\u00e9requis:","text":"<ol> <li>Python 3</li> <li> <p>Le module <code>openai</code>. Pour l'installer, utilisez la commande:     <code>pip install openai</code></p> </li> <li> <p>Une cl\u00e9 API OpenAI. Une fois obtenue, remplacez <code>VOTRE_CL\u00c9_API</code> dans le script par votre cl\u00e9 personnelle.</p> </li> </ol>"},{"location":"script/traitement%20fichier%20cours/#comment-utiliser-le-script","title":"Comment utiliser le script:","text":"<ol> <li> <p>Assurez-vous que tous les pr\u00e9requis sont satisfaits.</p> </li> <li> <p>Ex\u00e9cutez le script. Lors de l'ex\u00e9cution, il vous sera demand\u00e9 :</p> <ul> <li>Le chemin du dossier source contenant les fichiers <code>.md</code>.</li> <li>Le chemin du dossier de destination o\u00f9 vous souhaitez sauvegarder les fichiers trait\u00e9s.</li> </ul> </li> </ol> <p>Exemple :    <code>Entrez le chemin du dossier source contenant les fichiers .md : /chemin/vers/dossier/source    Entrez le chemin du dossier de destination pour les fichiers trait\u00e9s : /chemin/vers/dossier/destination</code></p> <ol> <li>Le script parcourra tous les fichiers <code>.md</code> dans le dossier source (et ses sous-dossiers) et sauvegardera les fichiers trait\u00e9s dans le dossier de destination.</li> </ol>"},{"location":"script/traitement%20fichier%20cours/#caracteristiques","title":"Caract\u00e9ristiques:","text":"<ul> <li>Le script conserve la structure des sous-dossiers du dossier source dans le dossier de destination.</li> <li>Les fichiers trait\u00e9s sont pr\u00e9fix\u00e9s par \"trait\u00e9_\" pour distinguer les fichiers originaux des fichiers trait\u00e9s.</li> </ul>"},{"location":"script/traitement%20fichier%20cours/#recommandations","title":"Recommandations:","text":"<ul> <li>Avant d'ex\u00e9cuter le script sur un grand nombre de fichiers, testez-le d'abord sur un petit ensemble de donn\u00e9es pour vous assurer qu'il fonctionne comme pr\u00e9vu.</li> <li>Gardez \u00e0 l'esprit que l'API OpenAI est une ressource payante. Assurez-vous de comprendre les co\u00fbts associ\u00e9s avant d'ex\u00e9cuter le script sur un grand nombre de fichiers.</li> </ul>"},{"location":"script/traitement%20fichier%20cours/IAmark2/","title":"IAmark2","text":"<pre><code>import openai\nimport os\n\nopenai.api_key = 'entrer votre clef API'\n\ndef traiter_texte_par_morceaux(texte, taille_max=2000):\n    morceaux = [texte[i:i+taille_max] for i in range(0, len(texte), taille_max)]\n    texte_trait\u00e9 = \"\"\n\n    for morceau in morceaux:\n        reponse = openai.Completion.create(engine=\"davinci\", prompt=morceau, max_tokens=100)\n        texte_trait\u00e9 += reponse.choices[0].text.strip()\n\n    return texte_trait\u00e9\n\ndef traiter_fichiers(dossier_source, dossier_destination):\n    for racine, dossiers, fichiers in os.walk(dossier_source):\n        for fichier in fichiers:\n            if fichier.endswith(\".md\"):\n                chemin_complet = os.path.join(racine, fichier)\n                with open(chemin_complet, 'r', encoding='utf-8') as f:\n                    contenu = f.read()\n                    contenu_trait\u00e9 = traiter_texte_par_morceaux(contenu)\n\n                chemin_destination = os.path.join(dossier_destination, fichier)\n                with open(chemin_destination, 'w', encoding='utf-8') as f:\n                    f.write(contenu_trait\u00e9)\n\nif __name__ == \"__main__\":\n    dossier_source = input(\"Entrez le chemin du dossier source contenant les fichiers .md :\")\n    dossier_destination = input(\"Entrez le chemin du dossier de destination pour les fichiers trait\u00e9s :\")\n    traiter_fichiers(dossier_source, dossier_destination)\n</code></pre>"}]}